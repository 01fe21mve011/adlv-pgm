                            
// Code your testbench here
// or browse Examples
`include "interface.sv"
`include "test.sv"
module tbench_top;
  

  //clock and reset signal declaration
  bit clk;
  bit reset;
  
  //clock generation
  always #5 clk = ~clk;
  
  //rest generation
  initial begin
    reset = 1;
    #5 reset = 0;
  end
  
  //creating instance of interface, inorder to connect DUT and testcase 
  intf i_intf(clk,reset);
  
  //testcase instance, interface handle iis passed to test as an argument
  test t1(i_intf);
  
  //DUT instance, interface signals are connected to the DUT ports
  adder DUT(
    .clk(i_intf.clk),
    .reset(i_intf.reset),
    .a(i_intf.a),
    .b(i_intf.b),
    .valid(i_intf.valid),
    .c(i_intf.c)
  );
  
   //enabling the wavedump
  initial begin
  $dumpfile("dump.vcd");$dumpvars;
 end
endmodule
    


                            
interface intf(input logic clk,reset);
  logic valid;
  logic [3:0]a;
  logic [3:0]b;
  logic [6:0]c;
endinterface



class driver;
  
  //used to count the number of transactions
  int no_transactions;
  
  //creating virtual interface handle
  virtual intf vif;
  
  //creating mailbox handle
  mailbox gen2driv;
  
  //constructor
  function new(virtual intf vif,mailbox gen2driv);
    //getting the interface
    this.vif = vif;
    //getting the mailbox handles from environment
    this.gen2driv = gen2driv;
  endfunction
  
  //Reset task, Reset the interface signals to initial values
  task reset;
    wait(vif.reset);
    $display("[DRIVER]-----Reset Started-----");
    vif.a <= 0;
    vif.b <= 0;
    vif.valid <= 0;
    wait(!vif.reset);
    $display("[DRIVER]-----Reset Ended-----");
  endtask
  
  //drivers the transaction items to interface signal
  task main;
    forever begin
      transaction trans;
      gen2driv.get(trans);
      @(posedge vif.clk);
      vif.valid <= 1;
      vif.a <= trans.a;
      vif.b <= trans.b;
      @(posedge vif.clk);
      vif.valid <= 0;
      trans.c <= vif.c;
      @(posedge vif.clk);
      trans.display("[Driver]");
      no_transactions++;
    end
  endtask
  
endclass



class monitor;
  
  //creating virtual interface handle
  virtual intf vif;
  
  //creating mailbox handle
  mailbox mon2scb;
  
  //constructor
  function new(virtual intf vif,mailbox mon2scb);
    //getting the interface
    this.vif = vif;
    //getting the mailbox handles from environment
    this.mon2scb = mon2scb;
  endfunction
  
  //Samples the interface and send the sample packet to scoreboard
  task main;
    forever begin
      transaction trans;
      trans = new();
      @(posedge vif.clk);
      wait(vif.valid);
      trans.a = vif.a;
      trans.b = vif.b;
      @(posedge vif.clk);
      trans.c = vif.c;
      @(posedge vif.clk);
      mon2scb.put(trans);
      trans.display("[Monitor]");
    end
  endtask
  
endclass



class scoreboard;
  
  //creating mailbox handle
  mailbox mon2scb;
  
  //used to count the number of transactions
  int no_transactions;
  
  //constructor
  function new(mailbox mon2scb);
    //getting the mailbox handles from environment
    this.mon2scb = mon2scb;
  endfunction
  
  //Compares the Actual result with the expected result
  task main();
    transaction trans;
    forever begin
      mon2scb.get(trans);
      if((trans.a+trans.b) == trans.c)
        $display("Result is as expected");
      else
        $error("Wrong result.\n\tExpected: %0d Actual: %0d",(trans.a+trans.b),trans.c);
      no_transactions++;
      trans.display("[Scoreboard]");
    end
  endtask
 
endclass


class transaction;
  rand bit[3:0]a;
  rand bit[3:0]b;
  bit[6:0]c;
  function void display(string name);
    $display("----------------");
    $display("-%s",name);
    $display("----------------");
    $display("-a=%0d,b=%0d",a,b);
    $display("-c=%0d",c);
    $display("----------------");
  endfunction
endclass


class generator;
  
  //declaring transaction class
  rand transaction trans;
  

  //repeat count, to specify number of items to generate
  int repeat_count;
  
    //declaring mailbox
  mailbox gen2driv;
  
  //event, to indicate the end of transaction generation
  event ended;
  
  //constructor
  function new(mailbox gen2driv);
    
  //getting the mailbox handle from env
  this.gen2driv = gen2driv;
  
  endfunction
  
    
  //main task, generates the repeat_count number of transaction //packets into mailbox
    task main();
      repeat(repeat_count) begin
        trans = new();
        if(!trans.randomize())$fatal("Gen::trans randomization failed");
        trans.display("[Generator]");
        gen2driv.put(trans);
      end
      ->ended;//triggering indicates the end of generation
    endtask
 
endclass



`include "transaction.sv"
`include "generator.sv"
`include "driver.sv"
`include "monitor.sv"
`include "scoreboard.sv"
class environment;
   
  //generator and driver instance
  generator  gen;
  driver     driv;
  monitor    mon;
  scoreboard scb;
   
  //mailbox handle's
  mailbox gen2driv;
  mailbox mon2scb;
   
  //virtual interface
  virtual intf vif;
   
  //constructor
  function new(virtual intf vif);
    //get the interface from test
    this.vif = vif;
     
    //creating the mailbox (Same handle will be shared across generator and driver)
    gen2driv = new();
    mon2scb  = new();
     
    //creating generator and driver
    gen  = new(gen2driv);
    driv = new(vif,gen2driv);
    mon  = new(vif,mon2scb);
    scb  = new(mon2scb);
  endfunction
   
  //
  task pre_test();
    driv.reset();
  endtask
   
  task test();
    fork
      gen.main();
      driv.main();
      mon.main();
      scb.main();
    join_any
  endtask
   
  task post_test();
    wait(gen.ended.triggered);
    wait(gen.repeat_count == driv.no_transactions); //Optional
    wait(gen.repeat_count == scb.no_transactions);
  endtask 
     //run task
  task run;
    pre_test();
    test();
    post_test();
    $finish;
  endtask
   endclass




interface intf(input logic clk,reset);
  logic valid;
  logic [3:0]a;
  logic [3:0]b;
  logic [6:0]c;
endinterface





`include "environment.sv"

program test(intf i_intf);
  
//declaring environment instance
  environment env;
  
  initial begin
    //creating environment
    
    env = new(i_intf);
    //setting the repeat count of generator as 10, means to generate 10 packets 
    env.gen.repeat_count=10;
    
    //calling run the env, it inturn calls generator and driver main tasks
    env.run();
  end
endprogram



// Code your design here
// Code your design here
// Code your design here
module adder(clk,reset,a,b,valid,c);
  input [3:0] a,b;
  input clk,reset;
  input valid;
  output reg [6:0] c;
  
  always @(posedge clk)
    begin
      if(reset) begin
        c = 6'b0;
      end
      else begin
        c = a + b;
      end
    end
endmodule
